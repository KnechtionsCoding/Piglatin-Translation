#include <iostream>
#include <iomanip>
#include <cmath>
#include <fstream>
#include <string>
#include <vector>
#include <cstdlib>
#include <stdio.h>
#include <ctype.h>
#include <sstream>

using namespace std;

bool check_vowel(char &firstLetter)
{
	bool test;

	if (firstLetter == 'a' || firstLetter == 'e' || firstLetter == 'i' || firstLetter == 'o' || firstLetter == 'u')
	{
		test = true;
	}
	else if (firstLetter != 'a' || firstLetter != 'e' || firstLetter != 'i' || firstLetter != 'o' || firstLetter != 'u')

	{
		test = false;
	}

	return test;
}

void vowel_translation( string &word_buff)
{
	word_buff.append("ay");
}

vector <string> piglatin_translation(vector <string> &piglatin, string &word_buff)
{
	char firstLetter;
	firstLetter = word_buff.at(0);
	const string vowels = "aeiouAEIOU";
	bool should_we = check_vowel(firstLetter);

	// need to add in the punctuation part of this assignment here so that it pulls out the punctuation before it adds the "ay"
	if (ispunct(word_buff.at(0)))
	{
		piglatin.push_back(word_buff);
	}

	else if (should_we == true)
	{
		if (isupper(word_buff.at(0)))
		{
			tolower(word_buff.at(0));
			vowel_translation(word_buff);
			toupper(word_buff.at(0));
			piglatin.push_back(word_buff);
		}
		
	}
	else if (should_we == false)
	{
		//assign the found vowel from the beginning to a substring, then append the substring to the end add ay and then delete the first part.
		//find first instance of consonant and then take everything before that and add it to the end of the word.
		int n;
		string appending;
		n = word_buff.find_first_of(vowels);

		if (n > 0) // anything but the first one is a consonant
		{
			if (isupper(word_buff.at(0)))
			{
				tolower(word_buff.at(0));
				appending = word_buff.substr(0, n);
				word_buff = word_buff.append(appending);
				word_buff = word_buff.append("ay");
				word_buff = word_buff.erase(0, n);
				toupper(word_buff.at(0));
			}
		}

		else if (n == 0) //starts with a consonant
		{
			if (isupper(word_buff.at(0)))
			{
				string first;
				stringstream consonants;
				consonants << firstLetter;
				consonants >> first;
				tolower(word_buff.at(0));
				word_buff = word_buff.append(first);
				word_buff = word_buff.append("ay");
				word_buff = word_buff.erase(word_buff.at(0));
				toupper(word_buff.at(0));
			}
		}

		else if (n == -1) //no vowels at all
		{
			if (isupper(word_buff.at(0)))
			{
				tolower(word_buff.at(0));
				word_buff = word_buff.append("ay");
				toupper(word_buff.at(0));
			}
		}

		piglatin.push_back(word_buff);
		
	}
	return piglatin;
}

void print_translation(vector<string> &piglatin)
{
	for (int i = 0; i < piglatin.size(); i++)
	{
		cout << piglatin[i] << " ";

	}
	system("pause>null");
}

void user_phrase(bool &run)
{
	string user_input;
	int word_counter = 0;
	vector<string> piglatin;
	/* each word seperated by a space is saved in the order it was typed
	and added to the vector: inputs */
	cout << "Please enter your first phrase: ";

	while (run == true)
	{
		
		getline(cin, user_input);

		if (user_input != "opstay")
		{
			string word_buff;
			stringstream ssUser_input(user_input);


			while (ssUser_input >> word_buff)
			{
				piglatin_translation(piglatin, word_buff);
			}

			cout << "Please enter your next phrase: ";

		}

		if (user_input == "opstay")
		{
			run = false;
			
			print_translation(piglatin);
			system("pause>null");

			
		}

	}

}

void checking_the_phrase()
{
	// isupper move through vector then use isupper to check if they are upper case then assign the index value, rearrange then uppercase the same index value.

	//same thing for punctuation. Check and move on. ispunct
	;
}

int main()
{
	bool run = true;
	while (run == true)
	{
		user_phrase(run);
		
	}
}
